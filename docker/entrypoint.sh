#!/usr/bin/env bash
set -euo pipefail

umask 0002

escape_squote() {
    printf "%s" "${1//\'/\'\\\'\'}"
}

normalize_bool() {
    local value="${1:-}";
    shopt -s nocasematch || true
    case "$value" in
        1|true|yes|on)
            printf "true"
            ;;
        *)
            printf "false"
            ;;
    esac
    shopt -u nocasematch || true
}

PROJECTSEND_CONFIG_PATH="${PROJECTSEND_CONFIG_PATH:-/config}"
PROJECTSEND_WAIT_FOR_DB="${PROJECTSEND_WAIT_FOR_DB:-1}"
PROJECTSEND_DB_WAIT_SECONDS="${PROJECTSEND_DB_WAIT_SECONDS:-60}"
PROJECTSEND_AUTO_INSTALL="${PROJECTSEND_AUTO_INSTALL:-1}"
PROJECTSEND_FORCE_CONFIG_REWRITE="${PROJECTSEND_FORCE_CONFIG_REWRITE:-0}"

DB_DRIVER="${PROJECTSEND_DB_DRIVER:-mysql}"
case "$DB_DRIVER" in
    mysql|mssql)
        ;;
    *)
        echo "[entrypoint] Unsupported PROJECTSEND_DB_DRIVER '$DB_DRIVER', falling back to 'mysql'" >&2
        DB_DRIVER="mysql"
        ;;
esac

DB_NAME="${PROJECTSEND_DB_NAME:-projectsend}"
DB_HOST="${PROJECTSEND_DB_HOST:-projectsend-db}"
DB_USER="${PROJECTSEND_DB_USER:-projectsend}"
DB_PASSWORD="${PROJECTSEND_DB_PASSWORD:-projectsend}"
DB_TABLE_PREFIX="${PROJECTSEND_DB_TABLE_PREFIX:-tbl_}"
SITE_LANG="${PROJECTSEND_SITE_LANG:-en}"
MAX_FILESIZE="${PROJECTSEND_MAX_FILESIZE:-2048}"
if ! [[ "$MAX_FILESIZE" =~ ^[0-9]+$ ]]; then
    echo "[entrypoint] Invalid PROJECTSEND_MAX_FILESIZE '$MAX_FILESIZE', using 2048" >&2
    MAX_FILESIZE=2048
fi
EMAIL_ENCODING="${PROJECTSEND_EMAIL_ENCODING:-utf-8}"
DEBUG_FLAG="$(normalize_bool "${PROJECTSEND_DEBUG:-false}")"

CONFIG_TARGET="/var/www/html/includes/sys.config.php"
CONFIG_VOLUME_FILE="${PROJECTSEND_CONFIG_PATH%/}/sys.config.php"

mkdir -p "$PROJECTSEND_CONFIG_PATH" /var/www/html/upload/files /var/www/html/upload/temp /var/www/html/temp/php-sessions

write_config() {
    cat <<PHP
<?php
// Auto-generated by docker/entrypoint.sh

define('DB_DRIVER', '$(escape_squote "$DB_DRIVER")');
define('DB_NAME', '$(escape_squote "$DB_NAME")');
define('DB_HOST', '$(escape_squote "$DB_HOST")');
define('DB_USER', '$(escape_squote "$DB_USER")');
define('DB_PASSWORD', '$(escape_squote "$DB_PASSWORD")');
define('TABLES_PREFIX', '$(escape_squote "$DB_TABLE_PREFIX")');
define('SITE_LANG','$(escape_squote "$SITE_LANG")');
define('MAX_FILESIZE',$(printf '%s' "$MAX_FILESIZE"));
define('EMAIL_ENCODING', '$(escape_squote "$EMAIL_ENCODING")');
define('DEBUG', $DEBUG_FLAG);
PHP
}

if [ ! -s "$CONFIG_VOLUME_FILE" ] || [ "$PROJECTSEND_FORCE_CONFIG_REWRITE" = "1" ]; then
    echo "[entrypoint] Writing ProjectSend configuration to $CONFIG_VOLUME_FILE"
    tmp_file="${CONFIG_VOLUME_FILE}.tmp"
    write_config > "$tmp_file"
    mv "$tmp_file" "$CONFIG_VOLUME_FILE"
fi

ln -sf "$CONFIG_VOLUME_FILE" "$CONFIG_TARGET"

chown -R www-data:www-data "$PROJECTSEND_CONFIG_PATH" /var/www/html/upload /var/www/html/temp || true

wait_for_db() {
    local waited=0
    local timeout="$PROJECTSEND_DB_WAIT_SECONDS"
    local dsn
    if [ "$DB_DRIVER" = "mssql" ]; then
        dsn="mssql:host=${DB_HOST};dbname=${DB_NAME}"
    else
        dsn="mysql:host=${DB_HOST};dbname=${DB_NAME}"
    fi
    local wait_script
    wait_script=$(mktemp /tmp/projectsend-wait-db.XXXXXX.php)
    cat <<PHP > "$wait_script"
<?php
\$dsn = getenv('PROJECTSEND_WAIT_DSN');
\$user = getenv('PROJECTSEND_WAIT_USER');
\$pass = getenv('PROJECTSEND_WAIT_PASSWORD');
\$options = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION];
try {
    new PDO(\$dsn, \$user, \$pass, \$options);
    exit(0);
} catch (Exception \$e) {
    fwrite(STDERR, \$e->getMessage());
    exit(1);
}
PHP
    while true; do
        if PROJECTSEND_WAIT_DSN="$dsn" \
           PROJECTSEND_WAIT_USER="$DB_USER" \
           PROJECTSEND_WAIT_PASSWORD="$DB_PASSWORD" \
           php "$wait_script" >/dev/null 2>&1; then
            break
        fi
        if [ "$waited" -ge "$timeout" ]; then
            echo "[entrypoint] Database did not become reachable within ${timeout}s" >&2
            rm -f "$wait_script"
            exit 1
        fi
        sleep 1
        waited=$((waited + 1))
    done
    rm -f "$wait_script"
}

if [ "$PROJECTSEND_WAIT_FOR_DB" = "1" ]; then
    echo "[entrypoint] Waiting for database ${DB_HOST}/${DB_NAME}"
    wait_for_db
fi

if [ "$PROJECTSEND_AUTO_INSTALL" = "1" ]; then
    echo "[entrypoint] Ensuring ProjectSend database schema is present"
    set +e
    install_log=$(mktemp /tmp/install-cli.XXXXXX.log)
    php -d display_errors=1 /var/www/html/docker/install-cli.php >"$install_log" 2>&1
    INSTALL_EXIT=$?
    set -e
    if [ -s "$install_log" ]; then
        cat "$install_log"
    fi
    rm -f "$install_log"
    if [ $INSTALL_EXIT -ne 0 ]; then
        echo "[entrypoint] install-cli failed with exit code $INSTALL_EXIT" >&2
        if [ -f /tmp/php_errors.log ]; then
            echo "[entrypoint] php_errors.log:" >&2
            cat /tmp/php_errors.log >&2
        fi
        exit $INSTALL_EXIT
    fi
fi

exec "$@"
